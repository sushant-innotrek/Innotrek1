1
00:00:00,060 --> 00:00:03,520
 तो मेरे यहां एक कार्यक्रम है जो फिबोनाची संख्याओं को प्रिंट करता है, और मैं चलना चाहता हूं 

2
00:00:03,680 --> 00:00:07,780
 हम इस प्रोग्राम को मशीन कोड में संकलित कैसे करते हैं और कंप्यूटर पर चलते हैं। 

3
00:00:07,900 --> 00:00:12,640
 लेकिन सबसे पहले, यह देखने के लिए कि इसका आउटपुट कैसा दिखता है जब हम इसे चलाते हैं 

4
00:00:12,700 --> 00:00:16,100
 क्या यह 255 तक फिबोनाची संख्याओं को प्रिंट करता है। 

5
00:00:16,239 --> 00:00:20,200
 और वास्तव में, 233 सबसे बड़ा फिबोनाची संख्या है जो 255 से कम है। 

6
00:00:20,460 --> 00:00:24,100
 और फिर यह खत्म हो जाता है। और यह सिर्फ हमेशा और हमेशा करता है। 

7
00:00:24,980 --> 00:00:26,360
 और इसलिए एक अनुस्मारक के रूप में, 

8
00:00:26,360 --> 00:00:31,640
 Fibonacci संख्या 0 और 1 के साथ शुरू होती है, और फिर अगला नंबर केवल अंतिम दो संख्याओं का योग है। 

9
00:00:31,640 --> 00:00:34,020
 तो 0 + 1 1 है, 1 + 1 2 है, 

10
00:00:34,140 --> 00:00:38,960
 1 + 2 3 है, 2 + 3 5 है, 3 + 5 8 है। तो आगे और आगे सभी तरह से नीचे। 

11
00:00:39,540 --> 00:00:43,580
 और इसलिए यह सुनिश्चित करने के लिए कि हम यह कैसे काम करते हैं, इस कार्यक्रम के माध्यम से चलने के लिए: 

12
00:00:43,800 --> 00:00:48,180
 हमारे पास तीन चर, एक्स, वाई और जेड हैं, 

13
00:00:48,580 --> 00:00:51,240
 और हमारे पास यह लूप है जो हमेशा के लिए हमेशा के लिए जारी रहता है। 

14
00:00:51,480 --> 00:00:57,780
 लेकिन उसके अंदर हम x से 0 और y से 1 सेट करते हैं। तो x 0 के रूप में शुरू होता है, 

15
00:00:58,240 --> 00:00:59,400
 वाई 1 के रूप में शुरू होता है, 

16
00:01:00,460 --> 00:01:07,019
 और फिर हमारे पास यह लूप है जहां हम एक्स के मान को प्रिंट करते हैं। तो एक्स 0 है, इसलिए हम इसे प्रिंट करते हैं। 

17
00:01:07,920 --> 00:01:13,680
 और फिर हम एक्स + वाई होने के रूप में z की गणना करते हैं। तो 0 + 1 1 है। 

18
00:01:15,240 --> 00:01:21,580
 और फिर हम जो करते हैं वह मूल रूप से इन सभी संख्याओं को बदल देता है। तो एक्स वाई के बराबर हो जाता है, 

19
00:01:21,880 --> 00:01:24,160
 तो एक्स 1 हो जाता है। 

20
00:01:24,900 --> 00:01:29,220
 y z के बराबर है, तो फिर y भी 1 हो जाता है, 

21
00:01:29,420 --> 00:01:30,700
 भले ही यह पहले से ही 1 था 

22
00:01:30,700 --> 00:01:36,120
 और फिर हम फिर से गुजरते हैं और इसे लूप करते हैं। एक्स 255 से कम है (यह केवल 1 है), इसलिए हम फिर से लूप करते हैं। 

23
00:01:36,130 --> 00:01:38,130
 हम एक्स प्रिंट करते हैं, एक्स 1 है, 

24
00:01:38,700 --> 00:01:44,180
 और फिर हम फिर से गणना करते हैं। जेड एक्स + वाई है, इसलिए 1 + 1 2 है, 

25
00:01:44,720 --> 00:01:49,500
 और फिर हम चीजों को बदलते हैं: तो x y के बराबर है, इसलिए एक्स 1 के बराबर है, 

26
00:01:49,580 --> 00:01:52,680
 और फिर y z के बराबर है। जेड 2 है, तो अब वाई 2 हो जाता है। 

27
00:01:53,380 --> 00:01:58,200
 और फिर हम फिर से लूप करते हैं, क्योंकि x 255 से कम है। और यहां हम 1 प्रिंट करते हैं। 

28
00:01:58,480 --> 00:02:01,600
 हम जेड की गणना करते हैं, जो अब 1 + 2 है 3, 

29
00:02:02,040 --> 00:02:04,140
 और फिर हमें चीजों को फिर से बदलना होगा, 

30
00:02:04,140 --> 00:02:08,780
 तो यहां दो बदलाव, यहां पर 3 बदलाव, इसलिए एक्स y बराबर है, y बराबर z, ... 

31
00:02:09,020 --> 00:02:16,040
 और फिर हम फिर से लूप। और यहां हम 2 प्रिंट करते हैं, हम एक्स को प्लस वाई के रूप में गणना करते हैं, इसलिए 2 + 3 5 है, ... 

32
00:02:16,660 --> 00:02:22,600
 इत्यादि इत्यादि। और आप देख सकते हैं कि हम ऐसा करते हैं, हम 0,1,1,2 और बहुत आगे प्रिंट कर रहे हैं। 

33
00:02:22,700 --> 00:02:28,320
 तो 0,1,1,2 ... और यह इस तरह जा रहा है। तो इस तरह यह प्रोग्राम फिबोनाची संख्याओं को प्रिंट करने का काम करता है। 

34
00:02:28,340 --> 00:02:30,980
 लेकिन जब हम इसे संकलित करते हैं तो क्या होता है? 

35
00:02:31,300 --> 00:02:34,540
 तो, अगर हम इसे संकलित करके संकलित करते हैं ... 

36
00:02:34,740 --> 00:02:38,240
 यह जीएनयू सी कंपाइलर है, और मैं कह रहा हूं कि आउटपुट फाइल अभी होने जा रही है 

37
00:02:38,340 --> 00:02:43,600
 फिब नामक एक फाइल। वह निष्पादन योग्य होगा जो चलाएगा, और फिर इनपुट fib.c. है 

38
00:02:43,740 --> 00:02:45,340
 (यह यह कोड कौन सा है, जिसे देखा जाता है) 

39
00:02:46,280 --> 00:02:51,280
 तो अगर हम इसे संकलित करते हैं तो हम इसे चला सकते हैं, लेकिन मैंने जो किया वह वास्तव में इसे अलग कर रहा है। 

40
00:02:51,280 --> 00:02:53,410
 तो यह आदेश क्या करता है, 

41
00:02:54,140 --> 00:02:58,600
 यह सिर्फ मेरी मैकबुक पर है। मुझे नहीं पता कि यह अन्य कंप्यूटरों पर काम करेगा या नहीं। 

42
00:02:58,780 --> 00:03:03,240
 जो भी हो, लेकिन यह मेरी मैकबुक पर काम करता है ... और यह मशीन भाषा निर्देशों को प्रिंट करता है 

43
00:03:03,320 --> 00:03:07,980
 जो संकलित थे। और इसलिए हम इस कार्यक्रम के संकलित संस्करण को देख रहे हैं जिसे हम चलाएंगे। 

44
00:03:08,900 --> 00:03:14,379
 और इसलिए मैं इन निर्देशों के माध्यम से चलना चाहता हूं, सिर्फ यह देखने के लिए कि क्या हम दयालु हो सकते हैं, जैसे, 

45
00:03:14,959 --> 00:03:21,399
 यह पता लगाएं कि इनमें से कौन सा निर्देश मूल सी प्रोग्राम में क्या हो रहा है उससे संबंधित है। 

46
00:03:22,420 --> 00:03:28,180
 और इसलिए यदि हम यहां शुरू करते हैं, तो यहां कुछ चीजें यहां चीजों को व्यवस्थित करने की तरह हैं। 

47
00:03:28,340 --> 00:03:36,360
 यहां सबकुछ वास्तव में मैंने जो लिखा है उसका हिस्सा नहीं है। यह सिर्फ ढेर फ्रेम की स्थापना की तरह है। 

48
00:03:37,400 --> 00:03:39,700
 (मुझे लगता है कि यह एक वापसी मूल्य या ऐसा कुछ है) 

49
00:03:39,700 --> 00:03:43,569
 तो जिसमें हम वास्तव में कुछ भी नहीं कर रहे हैं। आइए अब उन लोगों को अनदेखा करें। 

50
00:03:43,700 --> 00:03:50,680
 लेकिन यहां वह जगह है जहां हम वास्तव में उस कोड में आते हैं जिसे हमने यहां लिखा था: तो यह पहली पंक्ति यहां है, 

51
00:03:50,980 --> 00:03:56,700
 यह "लंबा स्थानांतरित करें", इस मूल्य 0 को इस चीज़ में ले जा रहा है, 

52
00:03:56,700 --> 00:04:03,480
 जो वास्तव में एक पता ऑफसेट है। तो% आरबीपी स्टैक बेस पॉइंटर है, 

53
00:04:04,140 --> 00:04:10,320
 और यह -8 वास्तव में बस ऑफसेट है। तो यह स्मृति में एक स्थान का जिक्र कर रहा है, 

54
00:04:10,480 --> 00:04:14,380
 और इसलिए हम स्मृति में इस विशिष्ट स्थान में 0 डाल रहे हैं। 

55
00:04:14,960 --> 00:04:16,640
 हम वास्तव में क्या कर रहे हैं, 

56
00:04:16,660 --> 00:04:19,920
 हम x = 0 कह रहे हैं। और इसलिए हम क्या देख सकते हैं कि एक्स 

57
00:04:20,298 --> 00:04:27,459
 वास्तव में स्मृति में यह स्थान है, यह -0x8 ऑफसेट स्टैक बेस पॉइंटर से ऑफसेट है। 

58
00:04:27,520 --> 00:04:33,060
 तो यहां पर, मैं बस लिखूंगा कि 0x8 परिवर्तनीय एक्स है 

59
00:04:33,060 --> 00:04:36,380
 इसलिए जब हम इसे प्रोग्राम में कहीं और देखते हैं, तो हम जान लेंगे कि एक्स है। 

60
00:04:36,640 --> 00:04:40,180
 तो यहां यह रेखा मूल रूप से कह रही है: x = 0। 

61
00:04:40,180 --> 00:04:44,320
 तो हम 0x8 में 0 सेट कर रहे हैं जो स्मृति स्थान है जहां x है। 

62
00:04:44,380 --> 00:04:51,620
 अगली पंक्ति मूल रूप से वही बात है, सिवाय इसके कि हम इस 0xc स्थान में 1 डाल रहे हैं। 

63
00:04:51,620 --> 00:04:55,760
 तो यहां हम वास्तव में y = 1 कह रहे हैं। और 0xC 

64
00:04:57,280 --> 00:05:00,380
 यहां कार्यक्रम में परिवर्तनीय वाई को संदर्भित करता है। 

65
00:05:01,460 --> 00:05:04,480
 अगली जोड़ी रेखाएं (इसलिए अब हम इस लूप को यहां दर्ज करें) 

66
00:05:04,480 --> 00:05:07,200
 तो अगली जोड़ी लाइनों को "printf" के साथ करना है, 

67
00:05:07,620 --> 00:05:14,220
 और इसलिए मैं इन चार लाइनों को यहां कॉल कर दूंगा, जिन्हें प्रिंटफ के साथ करना है, 

68
00:05:16,120 --> 00:05:18,860
 और हम एक्स के मूल्य को प्रिंट कर रहे हैं। 

69
00:05:19,240 --> 00:05:22,340
 और मूल रूप से ये चार पंक्तियां क्या कर रही हैं, यह सभी चीजों को स्थापित कर रही है, 

70
00:05:22,360 --> 00:05:27,660
 और फिर इसे कॉल करते हुए, आप जानते हैं, "printf"। मुझे लगता है कि यह एक स्मृति पता है 

71
00:05:27,660 --> 00:05:31,480
 कार्यक्रम में कहीं और है, यह यहां सूचीबद्ध नहीं है। 

72
00:05:32,140 --> 00:05:37,380
 लेकिन यह संभवतः "printf" फ़ंक्शन है जो सी मानक लाइब्रेरी द्वारा प्रदान किया गया है, 

73
00:05:37,700 --> 00:05:40,140
 और इसे कॉल करने के लिए, हमें कुछ चीजों को सेट करना होगा। 

74
00:05:40,150 --> 00:05:45,700
 मुझे लगता है कि यह शायद "% d \ n" स्ट्रिंग का पता है, 

75
00:05:46,130 --> 00:05:51,939
 और फिर, ज़ाहिर है, 0x8। हम पहचानते हैं कि, वह एक्स है। तो हम एक्स प्रिंट कर रहे हैं। 

76
00:05:52,520 --> 00:05:58,089
 और फिर ... मुझे यकीन नहीं है कि यह दूसरी बात क्या है, और फिर "कॉल" वास्तव में प्रिंटफ को कॉल करता है। 

77
00:05:58,640 --> 00:06:00,819
 तो इस तरह के "printf" के अनुरूप है। 

78
00:06:01,960 --> 00:06:06,300
 तो फिर printf के बाद हमारे पास यह z = x + y है, 

79
00:06:06,680 --> 00:06:10,960
 और वास्तव में, ये तीन पंक्तियां यहां हैं 

80
00:06:11,980 --> 00:06:21,640
 z = x + y हैं। और जिस तरह से यह काम करता है, हम क्या कर रहे हैं हम 0x8 (जो एक्स है) चल रहे हैं, 

81
00:06:22,040 --> 00:06:26,409
 इस% ईएसआई रजिस्टर में, इसलिए हम कह रहे हैं कि x% esi में जाता है। 

82
00:06:27,460 --> 00:06:33,360
 और फिर हम कह रहे हैं "सी का मूल्य जोड़ें।" तो हम कह रहे हैं 

83
00:06:35,120 --> 00:06:38,180
 "% esi के मान में y जोड़ें।" 

84
00:06:38,840 --> 00:06:42,240
 (और आप शायद यहां मेरी हस्तलेख पढ़ नहीं सकते हैं, थोड़ा गन्दा हो ...) 

85
00:06:42,249 --> 00:06:46,388
 लेकिन मूल रूप से हम जो कह रहे हैं, आप जानते हैं, एक्स% esi रजिस्टर में जाता है, 

86
00:06:46,388 --> 00:06:52,840
 और फिर हम वाई के मान को जोड़ते हैं (क्योंकि 0xc y का स्मृति स्थान है)% esi रजिस्टर में। 

87
00:06:52,920 --> 00:06:57,840
 और उसके बाद% esi रजिस्टर का मान लें, और इसे 0x10 में रखें। 

88
00:06:58,300 --> 00:07:00,900
 और 0x10 एक नया स्मृति स्थान है जिसे हमने अभी तक नहीं देखा है। 

89
00:07:01,000 --> 00:07:07,860
 तो 0x10, यह वास्तव में जेड की स्मृति स्थान है। और इसलिए हम इसे ज़ेड में डाल दें। 

90
00:07:08,080 --> 00:07:16,260
 तो ये तीन पंक्तियां मूल रूप से z = x + y कर रही हैं, इसलिए हम x प्राप्त कर रहे हैं और इसे% esi में डाल रहे हैं, 

91
00:07:16,269 --> 00:07:21,189
 हम इसे जोड़ रहे हैं, और फिर हम योग को वापस z में डाल रहे हैं। 

92
00:07:23,080 --> 00:07:28,500
 तो फिर, अगले दो पंक्तियों पर आगे बढ़ना x = y कर रहा है। 

93
00:07:28,500 --> 00:07:32,880
 और फिर, हम इस% ईएसआई रजिस्टर का उपयोग एक अस्थायी स्थान के रूप में कर रहे हैं। 

94
00:07:33,280 --> 00:07:39,920
 और इसलिए हम 0xc (जो y है) ले रहे हैं, इसे% esi में फिर से लोड करें, और फिर हम% esi में क्या ले रहे हैं 

95
00:07:39,920 --> 00:07:46,980
 और इसे 0x8 में डाल दिया। तो हम सी ले रहे हैं, और हम वाई ले रहे हैं,% esi में डाल रहे हैं 

96
00:07:47,019 --> 00:07:54,099
 और फिर हम% esi ले रहे हैं और इसे x में डाल रहे हैं, इसलिए y से x तक, या दूसरे शब्दों में: x = y। 

97
00:07:54,099 --> 00:07:55,969
 हम x बराबर y सेट कर रहे हैं। 

98
00:07:55,969 --> 00:08:02,200
 तो यह एक्स = वाई है। और फिर अगली दो पंक्तियां मूल रूप से एक ही चीज़ हैं, 

99
00:08:02,300 --> 00:08:08,980
 सिवाय इसके कि, हम 0x10 से 0xc में जा रहे हैं, इसलिए हम z से y में जा रहे हैं। 

100
00:08:09,020 --> 00:08:11,440
 या जिस तरह से, हम इसे यहाँ लिखते हैं y = z है, 

101
00:08:12,949 --> 00:08:14,949
 तो वाई जेड बराबर है। 

102
00:08:15,349 --> 00:08:21,849
 यह अगली पंक्ति, मुझे वास्तव में यकीन नहीं है कि यह लाइन क्या करती है। और इसलिए यदि ... हाँ, क्योंकि यह% eax रजिस्टर है 

103
00:08:22,609 --> 00:08:27,219
 इस अन्य स्मृति स्थान में स्थानांतरित किया जा रहा है कि हम किसी और चीज के लिए उपयोग नहीं कर रहे हैं, 

104
00:08:27,219 --> 00:08:29,079
 और हमारे पास यहां परिभाषित कोई अन्य चर नहीं है ... 

105
00:08:29,080 --> 00:08:35,100
 मैं ईमानदारी से नहीं जानता कि यह लाइन क्या कर रही है। तो यदि आप जानते हैं, तो टिप्पणियों में इसे इंगित करें। 

106
00:08:35,320 --> 00:08:43,700
 लेकिन इस पंक्ति के बाद हम यह तुलना करते हैं, इसलिए यह "लंबी कीमत की तुलना करें" है, और इसलिए हम तुलना कर रहे हैं 

107
00:08:44,100 --> 00:08:47,920
 0xff, जो 255 का हेक्साडेसिमल प्रतिनिधित्व है, 

108
00:08:48,140 --> 00:08:54,340
 हम तुलना कर रहे हैं कि स्मृति स्थान 0x8 में क्या है, जो x है। तो हम 255 और एक्स की तुलना कर रहे हैं। 

109
00:08:54,860 --> 00:08:59,480
 और हम कह रहे हैं "अगर कम से कम कूदें"। तो अगर कम हो तो "जेएल" कूद है, 

110
00:08:59,960 --> 00:09:01,620
 (इस तुलना के आधार पर) 

111
00:09:01,860 --> 00:09:06,600
 और "अगर कम से कम कूद" हमें इस पते f3d पर ले जा रहा है। 

112
00:09:06,840 --> 00:09:16,540
 और f3d यहां है, यहां पहला बयान जो हमारे printf का हिस्सा था। तो यदि एक्स 255 से कम है, 

113
00:09:16,540 --> 00:09:19,600
 हम "printf" पर वापस जा रहे हैं, जो हम यहां कह रहे हैं: 

114
00:09:19,700 --> 00:09:26,440
 "जबकि (x 255 से कम है)" हम इस लूप में रहते हैं ... यदि यह 255 से कम नहीं है 

115
00:09:26,699 --> 00:09:29,869
 कार्यक्रम प्रवाह सिर्फ कूदता है, यहां अगली पंक्ति में आता है, 

116
00:09:29,900 --> 00:09:32,300
 जो सिर्फ एक कूद है। और यह एक बिना शर्त कूद है। 

117
00:09:32,420 --> 00:09:38,180
 हम हमेशा f2f पर कूदेंगे। और f2f यहां वापस आ गया है, जहां हम x = 0 से शुरू करते हैं। 

118
00:09:38,820 --> 00:09:42,109
 और निश्चित रूप से आप जानते हैं कि यह लूप समाप्त होने के बाद 

119
00:09:42,109 --> 00:09:47,460
 हम यहां गिरते हैं, और हम इस मुख्य पाश में वापस आ गए हैं जो हमेशा और हमेशा के लिए चलता है। 

120
00:09:47,460 --> 00:09:51,100
 तो आप देख सकते हैं कि, जब हम सी प्रोग्राम संकलित करते हैं, 

121
00:09:51,100 --> 00:09:53,100
 हम इस मशीन कोड के साथ खत्म हो जाते हैं। 

122
00:09:53,100 --> 00:09:57,240
 और अगली बार मैं मशीन कोड लेना चाहता हूं, और देखें कि हम इस तरह के मशीन कोड कैसे ले सकते हैं 

123
00:09:58,060 --> 00:00:00,000
 और इसे हमारे घर के बने ब्रेडबोर्ड कंप्यूटर में लोड करें। 

